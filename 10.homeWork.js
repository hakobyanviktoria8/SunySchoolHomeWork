// 1. Գրել կոդ, որը կգնտնի այն բառերը, որոնք ca  հետո կլինի կամ k կամ f  տառերից որևէ մեկը  հետո կլինի e տառը:

console.log(/ca(f|k)e/gi.test("hello cae cae"));
console.log("hello cake cafe".match(/ca[fk]e/gi));


//     2.Ստեղծել կլաս, որին կանստրուկտրին տալիս ենք name1, name2 հատկությունները:
//     Ստեղծել կլաս, որը ժառանգում է այդ կլասին և կանստրուկտրին տալիս ենք name1, name2, name3, name4
//հատկություններ ընդ որում, ժառանգում է առաջին կլասի կանստրուկտորը,
// որպեսզի name1, name2 այդ կանստրուկտորի միջոցով տա:
// Երկրորդ կլասում ստեղծել մեթոդ, որը արտածի անուները և իրենց երկարությոնները: Ստեղծել օբեկտ երկրորդ կլասից  և կանչել մեթոդը:

class Students {
    constructor(name1,name2){
        this.name1 = name1;
        this.name2 = name2;
    }
}
class Path extends Students{
    constructor(name1,name2,name3,name4){
        super(name1,name2);
        this.name3 = name3;
        this.name4 = name4;
    }
    get_names(){
        console.log(this.name1,this.name1.length,
            this.name2,this.name2.length,
            this.name3,this.name3.length,
            this.name4,this.name4.length)
    }
}
let path = new Path("Ann", "Sony","Mega","Smith");
path.name();

//     3.Առաջադրանք ստեղծել խաղ Player VS Monster որտեղ կմրցեն Player և Monster,
// խաղի սկիզբը հայտարարելուց հետո օգտատիրոջից պետք է հարցվեն name և weapon Player
//  - ի համար և name Monster - ի համար։ Որից հետո խաղի առաջին ռաունդ կսկսվի ավտոմատ, իսկ ցանկացած հաջորդ ռաունդ անցնելու համար պետք է ներմուծվի հատուկ հրաման։ Ամեն
// ռանունդում խաղացողներ (Player և Monster) հարվածում են միմյանց հաջորդաբար և հենց որ խաղացողներից (Player և Monster) մեկի healt - ը պակասում է կամ հավասարվում
// է 0 ի խաղն ավարովում է ազդարարելով թե ով է հաղթել և ով պարտվել։ Պետք է console.log - երի միջոցով ազդարարվի յուրաքանչյուր ռաունդի սկիզբ խաղացողների (Player և Monster)
// հասցված damage և նրանց մնացած healt: Խաղի ընդացքում խաղացողներ (Player և Monster) պետք է ունենան հատուկ հնարավորություններ սահմանափակ քանակով։ Player - ի
// համար heal() որով նա կարող է բուժել իքն իրեն ոչ ավել քան 2 անգամ և supperAttack() որով նա հասցնում է կրկնապատկված damage սակայն կարող է օգտագործել մեկ անգամ։
// Monster  ի տարբերություն ունի մեկ հատուկ հնարավորություն range() որը կարող է օգտագործել մեկ անգամ և որի ընդհացքում հասցնում է մեկ ավել հարված։
// Player - ի նկարագրություն՝
// Player - ը դա class է որը ստեղծում է նոր Player օբյեկտ։ Player - ը ունի մի քանի property - ներ սկզբնական health հավասար 100 - ի և պետք է
// օգտատիրոջից հարցնի և ստանա name և weapon: Բացի դա Player - ը պետք է կարողանա կատարի մի քանի գործողություններ (այսինքն ունենա մեթոդներ)։ Player - ը պետք է
// կարողանա հաշվարկի իր հասցրած damage և կարողանա պահել այն որպես propery - ի, նրա հասցրած damage պետք է գեներացվի պատահականության սկզբունքով բայց պետք է լինի
// 6 - 14 միջակայքում։ Player - ը պետք է ունենա attack կատարելու հնարավորություն որը կհաշվարկի և կվերադարձնի նրա damge - ի քանակը։ Բացի վերը նշված Player - ը
// պետք է ունենա ևս մի քանի հնարավորություններ պետք է կարողանա հաշվարկի սեփական healt - ի քանակ կամայական չափի հարվածից հետո (Player - ին ստացված հարվածի)։
// Player - ը պետք է ունենա հնարավորություն բուժել ինքն իրեն heal, 1 - 18 ընկած միջակայքում կամայական արժեքով բայց տվյալ հնարավորություն նա չի կարող օգտագործել
// 2 - ից ավել անգամ (մեկ խաղի ընթացքում): Player - ը պետք է ունենա հնարավորություն հասցնելու supperAttack որի ժամանակ նա հասցնում է կրկնապատիկ damage սակայն
// այս հնարավորություն նա չի կարող օգտագործել 1 ից ավել անգամ։
// Monster - ի նկարագրություն
// Monster դա class է որը ստեղծում է նոր Monster օբյեկտ։ Նա ունի մի քանի property - ներ սկզբնական health հավասար 100 - ի և պետք է
// օգտատիրոջից հարցնի և ստանա name: Բացի դա Monster - ը պետք է կարողանա կատարի մի քանի գործողություններ (այսինքն ունենա մեթոդներ)։ Monster - ը պետք է
// կարողանա հաշվարկի իր հասցրած damage և կարողանա պահել այն որպես propery - ի, նրա հասցրած damage պետք է գեներացվի պատահականության սկզբունքով բայց պետք է լինի
// 10 - 24 միջակայքում։ Monster - ը պետք է ունենա attack կատարելու հնարավորություն որը կհաշվարկի և կվերադարձնի նրա damge - ի քանակը։ Բացի վերը նշված Player - ը
// պետք է ունենա ևս մի քանի հնարավորություններ պետք է կարողանա հաշվարկի սեփական healt - ի քանակ կամայական չափի հարվածից հետո (Monster - ին ստացված հարվածի)։
// Monster - ը պետք է ունենա հնարավորություն խաղի ընդհացքում 1 անգամ հասցնելու կրկնակի հարված։
// Game - ի նկարագրություն
// Game դա կունստրուկտոր ֆունկցիա է որն ունի մի քանի սկզբնական property round = 1 և isGameOver = false որոնք ըստ հերթականության պահում են թե որ երրորդ ռանունդն
// է և արդյոք խաղն ավարտված է (հուշում const game = new Game();)։ Game պետք է ունենա մի քանի մեթոդներ`
// start() - որը կազդարարի խաղի սկիզբ և կինիցիալեզացնի player ին և monsterin (հուշում game.start(Player, Monster);) callback - ի գաղափարի մասին չենք մոռանում։
// այս փուլում պետք է կատարվեն բոլոր հարցումներ կապված ոգտատիրոջ հետ և սկսվի առաջին ռաունդ։
// playerHeal() - որը կբուժի Player - ին միայն խաղացողի ինքն իրեն բուժելու դեպքում Monster չի կարողանում հարված հասցնել
//            (Բոլոր հատուկ հնարավորություններ ևս համարվում են ռաունդ և պետք է ունենան համապատասխան console.log եր)
// playerSupperAttack() - Player կհասցնի կրկնակի damage (Բոլոր հատուկ հնարավորություններ ևս համարվում են ռաունդ և պետք է ունենան համապատասխան console.log եր)
// monsterRange() - Monster ստանում է կրկնակի հարվածի հնարավորություն  (Բոլոր հատուկ հնարավորություններ ևս համարվում են ռաունդ և պետք է ունենան համապատասխան console.log եր)
// P.S հուշում կարող եք օգնող մեթոդներ ունենալ հաջորդ ռաունդ անցնելու և ստուգելու արդյոք ոչ մեկ չի զրոյացել, մնացորդային կյանքի console.log ի համար, միմյանց
// հարվածելու և ընդհանուր console.log երի համար։
//
// 3-րդ խնդիրը 60 միավոր է ։

class Player {
    constructor(){
        this.name = prompt("Please write Player name");
    }

}


class Monster {

}














